C#에서 비동기 방식으로 메소드를 실행하는 방법중엔 Task가 있다.

using System.Threading.Tasks;

Task task = new Task(()=>{
  Console.WriteLine("task 실행");
});
task.Start();
task.Wait();
와 같이 람다식으로 간단하게 실행할 수 있는데

여기서 Wait()은 비동기 메소드의 동기 시점을 정한다고 볼 수 있다.
task를 Start 하고 나서 task는 비동기로 실행되고 메인 메소드도 멈추지 않고 실행된다.
이때 중간에 task.Wait()을 만나게 되면 메인 메소드의 진행이 멈추고 비동기 메소드의 종료를 기다렸다가
메인 메소드의 진행을 계속하게 되는 것이다.

async는 해당 메소드가 await을  가지고 있음을 알려주는 역할을 한다.
async 메소드의 리턴 타입은 보통 Task나 Task<TReturn>을 사용한다.
이벤트 헨들러 사용을 위해 void타입도 허용하고 있다.

ex)

async Task<String> Method(){
  return "async method";
}

이런 식으로 리턴할 경우 컴파일러가 자동으로 Task<String>으로 변환해준다.


await의 사용 예제

public class main{
	
	public static async Task Count(){
		int result = 0;
		Console.WriteLine("Start Count");
		var task1 = Task.Run(()=>{
			int sum = 0;
				for(int i = 0;i<10;i++){
				sum+=i;
				Thread.Sleep(100);
			}
			return sum;
		});
		Console.WriteLine("before await");
		result = await task1;
		Console.WriteLine("in Count finish");
	}
	
	public static void Main(){
		var tesk = Count();
		Console.WriteLine("시작");
		Console.WriteLine("끝");
		tesk.Wait();
	}
}

결과는 아래와 같이 나온다

Start Count
before await
시작
끝
in Count finish
async 메소드안에서 실행된 비동기 task를 
await키워드를 쓴 시점에서 기다리고 task가 다 실행되면 나머지를 실행한다.
main에서는 비동기로 코드를 계속 실행한다.
만약 await task1 이 아니라 task1.Wait()을 사용했다면 task1의 작업이 다 끝난다음 main을 실행하게 된다.
